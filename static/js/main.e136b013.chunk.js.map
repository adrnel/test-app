{"version":3,"sources":["Menu.jsx","Header.jsx","App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","MenuComponent","style","width","defaultSelectedKeys","defaultOpenKeys","mode","theme","Item","key","icon","PieChartOutlined","DesktopOutlined","ContainerOutlined","MailOutlined","title","AppstoreOutlined","Header","className","onBack","subTitle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAUQA,EAAYC,IAAZD,QAqCOE,EAnCO,kBAClB,yBAAKC,MAAO,CAAEC,MAAO,MACjB,kBAAC,IAAD,CACIC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,KAAK,SACLC,MAAM,QAEN,kBAAC,IAAKC,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACC,EAAA,EAAD,OAAzB,YAGA,kBAAC,IAAKH,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACE,EAAA,EAAD,OAAzB,YAGA,kBAAC,IAAKJ,KAAN,CAAWC,IAAI,IAAIC,KAAM,kBAACG,EAAA,EAAD,OAAzB,YAGA,kBAACd,EAAD,CAASU,IAAI,OAAOC,KAAM,kBAACI,EAAA,EAAD,MAAkBC,MAAM,kBAC9C,kBAAC,IAAKP,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,aAEJ,kBAACV,EAAD,CAASU,IAAI,OAAOC,KAAM,kBAACM,EAAA,EAAD,MAAsBD,MAAM,kBAClD,kBAAC,IAAKP,KAAN,CAAWC,IAAI,KAAf,YACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,aACA,kBAACV,EAAD,CAASU,IAAI,OAAOM,MAAM,WACtB,kBAAC,IAAKP,KAAN,CAAWC,IAAI,MAAf,aACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,MAAf,kB,SC5BLQ,EATA,kBACX,kBAAC,IAAD,CACIC,UAAU,mBACVC,OAAQ,kBAAM,MACdJ,MAAM,aACNK,SAAS,wCCIFC,EAPH,kBACR,yBAAKH,UAAU,OACX,kBAAC,EAAD,MACA,kBAAClB,EAAD,QCIYsB,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e136b013.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\nimport {\n    AppstoreOutlined,\n    PieChartOutlined,\n    DesktopOutlined,\n    ContainerOutlined,\n    MailOutlined,\n} from '@ant-design/icons';\n\nconst { SubMenu } = Menu;\n\nconst MenuComponent = () => (\n    <div style={{ width: 256 }}>\n        <Menu\n            defaultSelectedKeys={['1']}\n            defaultOpenKeys={['sub1']}\n            mode=\"inline\"\n            theme=\"dark\"\n        >\n            <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\n                Option 1\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n                Option 2\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<ContainerOutlined />}>\n                Option 3\n            </Menu.Item>\n            <SubMenu key=\"sub1\" icon={<MailOutlined />} title=\"Navigation One\">\n                <Menu.Item key=\"5\">Option 5</Menu.Item>\n                <Menu.Item key=\"6\">Option 6</Menu.Item>\n                <Menu.Item key=\"7\">Option 7</Menu.Item>\n                <Menu.Item key=\"8\">Option 8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<AppstoreOutlined />} title=\"Navigation Two\">\n                <Menu.Item key=\"9\">Option 9</Menu.Item>\n                <Menu.Item key=\"10\">Option 10</Menu.Item>\n                <SubMenu key=\"sub3\" title=\"Submenu\">\n                    <Menu.Item key=\"11\">Option 11</Menu.Item>\n                    <Menu.Item key=\"12\">Option 12</Menu.Item>\n                </SubMenu>\n            </SubMenu>\n        </Menu>\n    </div>\n);\n\nexport default MenuComponent;","import React from 'react';\nimport { PageHeader } from 'antd';\n\nconst Header = () => (\n    <PageHeader\n        className=\"site-page-header\"\n        onBack={() => null}\n        title=\"Best Cubes\"\n        subTitle=\"Best Rubiks like puzzles out there\"\n    />\n);\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Menu from './Menu';\nimport Header from './Header';\n\nconst App = () => (\n    <div className=\"App\">\n        <Header />\n        <Menu />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}